// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getBinaryREH
arma::mat getBinaryREH(arma::uvec dyad, arma::uword D);
RcppExport SEXP _bremory_getBinaryREH(SEXP dyadSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type dyad(dyadSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(getBinaryREH(dyad, D));
    return rcpp_result_gen;
END_RCPP
}
// getIntervals
void getIntervals(Rcpp::Environment env, arma::vec widths, arma::vec time, arma::uword M, arma::uword K_q, int nthreads);
RcppExport SEXP _bremory_getIntervals(SEXP envSEXP, SEXP widthsSEXP, SEXP timeSEXP, SEXP MSEXP, SEXP K_qSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type widths(widthsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K_q(K_qSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    getIntervals(env, widths, time, M, K_q, nthreads);
    return R_NilValue;
END_RCPP
}
// getCountsOMP
arma::mat getCountsOMP(arma::mat binaryREH, arma::mat lbs_ubs, int nthreads);
RcppExport SEXP _bremory_getCountsOMP(SEXP binaryREHSEXP, SEXP lbs_ubsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type binaryREH(binaryREHSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lbs_ubs(lbs_ubsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(getCountsOMP(binaryREH, lbs_ubs, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// getCountsIndex
arma::vec getCountsIndex(arma::mat intervals, arma::mat counts, int nthreads);
RcppExport SEXP _bremory_getCountsIndex(SEXP intervalsSEXP, SEXP countsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(getCountsIndex(intervals, counts, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// getEndoEffects
arma::cube getEndoEffects(Rcpp::Environment env, arma::uword M, arma::uword D, arma::vec time, arma::mat edgelist, arma::umat risksetMatrix, arma::umat risksetCube0, arma::uword nthreads);
RcppExport SEXP _bremory_getEndoEffects(SEXP envSEXP, SEXP MSEXP, SEXP DSEXP, SEXP timeSEXP, SEXP edgelistSEXP, SEXP risksetMatrixSEXP, SEXP risksetCube0SEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type risksetMatrix(risksetMatrixSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type risksetCube0(risksetCube0SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(getEndoEffects(env, M, D, time, edgelist, risksetMatrix, risksetCube0, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// lpd
double lpd(arma::vec pars, arma::mat stats, arma::uvec event, double interevent_time);
RcppExport SEXP _bremory_lpd(SEXP parsSEXP, SEXP statsSEXP, SEXP eventSEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(lpd(pars, stats, event, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// getWAIC
arma::mat getWAIC(arma::mat pars, arma::cube stats, arma::umat events, arma::vec interevent_time);
RcppExport SEXP _bremory_getWAIC(SEXP parsSEXP, SEXP statsSEXP, SEXP eventsSEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(getWAIC(pars, stats, events, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// smoothing_posterior
arma::cube smoothing_posterior(arma::uvec sample_models, arma::rowvec knots_seq, arma::ucube which_pars, arma::mat post_betas, arma::mat post_gammas, arma::uword U);
RcppExport SEXP _bremory_smoothing_posterior(SEXP sample_modelsSEXP, SEXP knots_seqSEXP, SEXP which_parsSEXP, SEXP post_betasSEXP, SEXP post_gammasSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type sample_models(sample_modelsSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type knots_seq(knots_seqSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type which_pars(which_parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type post_betas(post_betasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type post_gammas(post_gammasSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(smoothing_posterior(sample_models, knots_seq, which_pars, post_betas, post_gammas, U));
    return rcpp_result_gen;
END_RCPP
}
// getDraws
arma::cube getDraws(arma::uvec sample_models, arma::ucube which_pars, arma::vec n_pars, arma::uword n_stats, Rcpp::List input, arma::rowvec knots_seq);
RcppExport SEXP _bremory_getDraws(SEXP sample_modelsSEXP, SEXP which_parsSEXP, SEXP n_parsSEXP, SEXP n_statsSEXP, SEXP inputSEXP, SEXP knots_seqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type sample_models(sample_modelsSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type which_pars(which_parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n_pars(n_parsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_stats(n_statsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type knots_seq(knots_seqSEXP);
    rcpp_result_gen = Rcpp::wrap(getDraws(sample_models, which_pars, n_pars, n_stats, input, knots_seq));
    return rcpp_result_gen;
END_RCPP
}
// tryClone
double tryClone(double input);
RcppExport SEXP _bremory_tryClone(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(tryClone(input));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bremory_getBinaryREH", (DL_FUNC) &_bremory_getBinaryREH, 2},
    {"_bremory_getIntervals", (DL_FUNC) &_bremory_getIntervals, 6},
    {"_bremory_getCountsOMP", (DL_FUNC) &_bremory_getCountsOMP, 3},
    {"_bremory_getCountsIndex", (DL_FUNC) &_bremory_getCountsIndex, 3},
    {"_bremory_getEndoEffects", (DL_FUNC) &_bremory_getEndoEffects, 8},
    {"_bremory_lpd", (DL_FUNC) &_bremory_lpd, 4},
    {"_bremory_getWAIC", (DL_FUNC) &_bremory_getWAIC, 4},
    {"_bremory_smoothing_posterior", (DL_FUNC) &_bremory_smoothing_posterior, 6},
    {"_bremory_getDraws", (DL_FUNC) &_bremory_getDraws, 6},
    {"_bremory_tryClone", (DL_FUNC) &_bremory_tryClone, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bremory(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
