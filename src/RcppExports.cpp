// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getRiskset_old
arma::mat getRiskset_old(arma::vec actors_id, arma::uword N, bool selfedges);
RcppExport SEXP _bremory_getRiskset_old(SEXP actors_idSEXP, SEXP NSEXP, SEXP selfedgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type actors_id(actors_idSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type selfedges(selfedgesSEXP);
    rcpp_result_gen = Rcpp::wrap(getRiskset_old(actors_id, N, selfedges));
    return rcpp_result_gen;
END_RCPP
}
// getRisksetMatrix_old
arma::umat getRisksetMatrix_old(arma::mat riskset, arma::uword N);
RcppExport SEXP _bremory_getRisksetMatrix_old(SEXP risksetSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(getRisksetMatrix_old(riskset, N));
    return rcpp_result_gen;
END_RCPP
}
// getBinaryREH
arma::mat getBinaryREH(arma::uword M, arma::uword N, arma::mat edgelist, arma::umat riskset_matrix);
RcppExport SEXP _bremory_getBinaryREH(SEXP MSEXP, SEXP NSEXP, SEXP edgelistSEXP, SEXP riskset_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type riskset_matrix(riskset_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(getBinaryREH(M, N, edgelist, riskset_matrix));
    return rcpp_result_gen;
END_RCPP
}
// getIntervals
void getIntervals(Rcpp::Environment env, arma::vec widths);
RcppExport SEXP _bremory_getIntervals(SEXP envSEXP, SEXP widthsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type widths(widthsSEXP);
    getIntervals(env, widths);
    return R_NilValue;
END_RCPP
}
// getCountsOMP
arma::mat getCountsOMP(arma::mat binaryREH, arma::mat lbs_ubs, int n_cores);
RcppExport SEXP _bremory_getCountsOMP(SEXP binaryREHSEXP, SEXP lbs_ubsSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type binaryREH(binaryREHSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lbs_ubs(lbs_ubsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(getCountsOMP(binaryREH, lbs_ubs, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// getCountsIndex
arma::vec getCountsIndex(arma::mat intervals, arma::mat counts);
RcppExport SEXP _bremory_getCountsIndex(SEXP intervalsSEXP, SEXP countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type counts(countsSEXP);
    rcpp_result_gen = Rcpp::wrap(getCountsIndex(intervals, counts));
    return rcpp_result_gen;
END_RCPP
}
// getEndoEffects
arma::cube getEndoEffects(Rcpp::Environment env);
RcppExport SEXP _bremory_getEndoEffects(SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type env(envSEXP);
    rcpp_result_gen = Rcpp::wrap(getEndoEffects(env));
    return rcpp_result_gen;
END_RCPP
}
// getSmoothEndoEffects
arma::cube getSmoothEndoEffects(Rcpp::List reh, std::vector<std::string> endo_effects, Rcpp::List endo_memory_pars, arma::uword n_cores);
RcppExport SEXP _bremory_getSmoothEndoEffects(SEXP rehSEXP, SEXP endo_effectsSEXP, SEXP endo_memory_parsSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type reh(rehSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type endo_effects(endo_effectsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type endo_memory_pars(endo_memory_parsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(getSmoothEndoEffects(reh, endo_effects, endo_memory_pars, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// lpd
double lpd(arma::vec pars, arma::mat stats, arma::uvec event, double interevent_time);
RcppExport SEXP _bremory_lpd(SEXP parsSEXP, SEXP statsSEXP, SEXP eventSEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(lpd(pars, stats, event, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// nllik
double nllik(arma::vec pars, arma::cube stats, arma::umat event_binary, arma::vec interevent_time, int n_cores);
RcppExport SEXP _bremory_nllik(SEXP parsSEXP, SEXP statsSEXP, SEXP event_binarySEXP, SEXP interevent_timeSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type event_binary(event_binarySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type interevent_time(interevent_timeSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(nllik(pars, stats, event_binary, interevent_time, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// performBSIR
Rcpp::List performBSIR(arma::uword nsim, arma::vec mean, arma::mat sigma, double df, arma::cube stats, arma::umat event_binary, arma::vec interevent_time, arma::uword n_cores);
RcppExport SEXP _bremory_performBSIR(SEXP nsimSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP dfSEXP, SEXP statsSEXP, SEXP event_binarySEXP, SEXP interevent_timeSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type event_binary(event_binarySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type interevent_time(interevent_timeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(performBSIR(nsim, mean, sigma, df, stats, event_binary, interevent_time, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// getWAIC
arma::mat getWAIC(arma::mat pars, arma::cube stats, arma::umat events, arma::vec interevent_time);
RcppExport SEXP _bremory_getWAIC(SEXP parsSEXP, SEXP statsSEXP, SEXP eventsSEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(getWAIC(pars, stats, events, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// lpdWAIC
arma::mat lpdWAIC(arma::mat pars, arma::cube stats, arma::umat events, arma::vec interevent_time);
RcppExport SEXP _bremory_lpdWAIC(SEXP parsSEXP, SEXP statsSEXP, SEXP eventsSEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(lpdWAIC(pars, stats, events, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// logpJi
arma::vec logpJi(arma::mat pars, arma::mat stats, arma::uvec event, double interevent_time);
RcppExport SEXP _bremory_logpJi(SEXP parsSEXP, SEXP statsSEXP, SEXP eventSEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(logpJi(pars, stats, event, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// smoothing_posterior
arma::cube smoothing_posterior(arma::uvec sample_models, arma::rowvec knots_seq, arma::ucube which_pars, arma::mat post_betas, arma::mat post_gammas, arma::uword U);
RcppExport SEXP _bremory_smoothing_posterior(SEXP sample_modelsSEXP, SEXP knots_seqSEXP, SEXP which_parsSEXP, SEXP post_betasSEXP, SEXP post_gammasSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type sample_models(sample_modelsSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type knots_seq(knots_seqSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type which_pars(which_parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type post_betas(post_betasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type post_gammas(post_gammasSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(smoothing_posterior(sample_models, knots_seq, which_pars, post_betas, post_gammas, U));
    return rcpp_result_gen;
END_RCPP
}
// getDraws
arma::cube getDraws(arma::uvec sample_models, arma::ucube which_pars, arma::vec n_pars, arma::uword n_stats, Rcpp::List input, arma::rowvec knots_seq);
RcppExport SEXP _bremory_getDraws(SEXP sample_modelsSEXP, SEXP which_parsSEXP, SEXP n_parsSEXP, SEXP n_statsSEXP, SEXP inputSEXP, SEXP knots_seqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type sample_models(sample_modelsSEXP);
    Rcpp::traits::input_parameter< arma::ucube >::type which_pars(which_parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n_pars(n_parsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_stats(n_statsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type knots_seq(knots_seqSEXP);
    rcpp_result_gen = Rcpp::wrap(getDraws(sample_models, which_pars, n_pars, n_stats, input, knots_seq));
    return rcpp_result_gen;
END_RCPP
}
// tryClone
Rcpp::DataFrame tryClone(Rcpp::DataFrame input);
RcppExport SEXP _bremory_tryClone(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(tryClone(input));
    return rcpp_result_gen;
END_RCPP
}
// stepwiseWeight
double stepwiseWeight(double x, arma::mat pars);
RcppExport SEXP _bremory_stepwiseWeight(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(stepwiseWeight(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// linearWeight
double linearWeight(double x, arma::mat pars);
RcppExport SEXP _bremory_linearWeight(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(linearWeight(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// twoStepsWeight
double twoStepsWeight(double x, arma::mat pars);
RcppExport SEXP _bremory_twoStepsWeight(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(twoStepsWeight(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// weibullWeight
double weibullWeight(double x, arma::mat pars);
RcppExport SEXP _bremory_weibullWeight(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(weibullWeight(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// halflifeWeight
double halflifeWeight(double x, arma::mat pars);
RcppExport SEXP _bremory_halflifeWeight(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(halflifeWeight(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// tmaxWeight
double tmaxWeight(double x, arma::mat pars);
RcppExport SEXP _bremory_tmaxWeight(SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(tmaxWeight(x, pars));
    return rcpp_result_gen;
END_RCPP
}
// decay
double decay(std::string type, double x, arma::mat pars);
RcppExport SEXP _bremory_decay(SEXP typeSEXP, SEXP xSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(decay(type, x, pars));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bremory_getRiskset_old", (DL_FUNC) &_bremory_getRiskset_old, 3},
    {"_bremory_getRisksetMatrix_old", (DL_FUNC) &_bremory_getRisksetMatrix_old, 2},
    {"_bremory_getBinaryREH", (DL_FUNC) &_bremory_getBinaryREH, 4},
    {"_bremory_getIntervals", (DL_FUNC) &_bremory_getIntervals, 2},
    {"_bremory_getCountsOMP", (DL_FUNC) &_bremory_getCountsOMP, 3},
    {"_bremory_getCountsIndex", (DL_FUNC) &_bremory_getCountsIndex, 2},
    {"_bremory_getEndoEffects", (DL_FUNC) &_bremory_getEndoEffects, 1},
    {"_bremory_getSmoothEndoEffects", (DL_FUNC) &_bremory_getSmoothEndoEffects, 4},
    {"_bremory_lpd", (DL_FUNC) &_bremory_lpd, 4},
    {"_bremory_nllik", (DL_FUNC) &_bremory_nllik, 5},
    {"_bremory_performBSIR", (DL_FUNC) &_bremory_performBSIR, 8},
    {"_bremory_getWAIC", (DL_FUNC) &_bremory_getWAIC, 4},
    {"_bremory_lpdWAIC", (DL_FUNC) &_bremory_lpdWAIC, 4},
    {"_bremory_logpJi", (DL_FUNC) &_bremory_logpJi, 4},
    {"_bremory_smoothing_posterior", (DL_FUNC) &_bremory_smoothing_posterior, 6},
    {"_bremory_getDraws", (DL_FUNC) &_bremory_getDraws, 6},
    {"_bremory_tryClone", (DL_FUNC) &_bremory_tryClone, 1},
    {"_bremory_stepwiseWeight", (DL_FUNC) &_bremory_stepwiseWeight, 2},
    {"_bremory_linearWeight", (DL_FUNC) &_bremory_linearWeight, 2},
    {"_bremory_twoStepsWeight", (DL_FUNC) &_bremory_twoStepsWeight, 2},
    {"_bremory_weibullWeight", (DL_FUNC) &_bremory_weibullWeight, 2},
    {"_bremory_halflifeWeight", (DL_FUNC) &_bremory_halflifeWeight, 2},
    {"_bremory_tmaxWeight", (DL_FUNC) &_bremory_tmaxWeight, 2},
    {"_bremory_decay", (DL_FUNC) &_bremory_decay, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bremory(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
