for(i in 1:141) {tab_1 <- table(lettere[lettere$Mittente==persone[i],]$`Luogo di produzione`)
if(length(as.vector(tab_1))>1) print(tab_1)}
degree(net, mode="all")
E(net)$weight
table(c(df_links$Mittente,df_links$Destinatario))
sort(table(c(df_links$Mittente,df_links$Destinatario)))
degree_df_links <- sort(table(c(df_links$Mittente,df_links$Destinatario)))
degree(net, mode="all")
tail(degree_df_links)
?degree
degree_distribution(net)
plot(degree_distribution(net))
degree(net, mode="total")
sort(degree(net, mode="total"))
(degree_df_links)[1:10];sort(degree(net, mode="total"))[1:10]
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode="total")
V(net)$size <- deg*3
rm(degree_df_links)
plot(net)
deg <- degree(net, mode="total")
V(net)$size <- deg
plot(net)
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode="out")
V(net)$size <- deg
plot(net)
deg <- degree(net, mode="in")
V(net)$size <- deg
plot(net)
deg <- degree(net, mode="in")
V(net)$size <- log(deg)
plot(net)
deg <- degree(net, mode="in")
V(net)$size <- log(deg+0.5)
plot(net)
deg <- degree(net, mode="in")
V(net)$size <- log(deg+1)
plot(net)
deg <- degree(net, mode="in")
V(net)$size <- deg**0.5
plot(net)
deg
deg <- degree(net, mode="in")
deg <- degree(net, mode="total")
deg
plot)deg)
plot(deg)
plot(deg,log(deg+0.5))
plot(deg,log(deg+1.5))
plot(deg,deg*2)
plot(deg,deg**22)
plot(deg,deg**2)
plot(deg,deg**0.2)
plot(deg)
plot(deg/3)
plot(deg/30)
V(net)$size <- deg/30
plot(net)
V(net)$size <- deg/15
plot(net)
V(net)$label <- NA
plot(net)
deg <- degree(net, mode="in")
V(net)$size <- deg/10
# The labels are currently node IDs.
# Setting them to NA will render no labels:
V(net)$label <- NA
plot(net)
length(V(net))
df_links <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
df_links <- na.omit(df_links) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
df_nodes <- data.frame(IDs = sort(unique(c(df_links$Mittente,df_links$Destinatario))))
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode="in")
V(net)$size <- deg/10
plot(net)
# The labels are currently node IDs.
# Setting them to NA will render no labels:
V(net)$label <- NA
plot(net)
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
l <- layout_in_circle(net)
plot(net, layout=l)
V(net)$size <- deg
l <- layout_in_circle(net)
plot(net, layout=l)
V(net)$size <- deg/0.1
l <- layout_in_circle(net)
plot(net, layout=l)
V(net)$size <- deg/5
l <- layout_in_circle(net)
plot(net, layout=l)
l <- layouy_with_fr(net)
plot(net, layout=l)
l <- layout_with_fr(net)
plot(net, layout=l)
E(net.bg)$arrow.mode <- 0
E(net)$arrow.mode <- 0
plot(net, layout=l)
E(net)$arrow.mode <- 1
plot(net, layout=l)
E(net)$arrow.mode <- 2
plot(net, layout=l)
E(net)$arrow.mode <- 2
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
plot(net, edge.arrow.size=.4, edge.curved=.1)
deg <- degree(net, mode="total")
plot(deg)
plot(deg/15)
V(net)$size <- deg/15
plot(net)
igraph::edge.attributes()
igraph::edge.attributes(net)
igraph::edges(net)
igraph::edges(net)[1:10,]
E(net)
View(E(net))
class(E(net))
as_adj(net)
class(as_adj(net))
E(net)$width <- (as_adj(net))
as.matrix(as_adj(net))
freq = as.vector(as.matrix(as_adj(net)))
E(net)
dim(E(net))
dim(unique(df_links))
df_links <- dim(unique(df_links))
df_links <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
df_links <- na.omit(df_links)
df_links <- unique(df_links)
df_links <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
df_links <- na.omit(df_links)
table(df_links)
paste(df_links$Mittente,df_links$Destinatario,sep="_")
length(unique(paste(df_links$Mittente,df_links$Destinatario,sep="_")))
table(paste(df_links$Mittente,df_links$Destinatario,sep="_"))
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
df_links_pre <- na.omit(df_links_pre) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
df_links <- unique(df_links_pre) # interazioni di interesse
freq_links <- table(paste(df_links$Mittente,df_links$Destinatario,sep="_"))
df_links[1:10,]
freq_links
freq_links <- table(df_links)
freq_links
freq_links <- table(df_links)
rownames(freq_links)
colnames(freq_links)
# net
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
# rimozione NA's
df_links_pre <- na.omit(df_links_pre) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
df_links <- unique(df_links_pre) # interazioni di interesse
freq_links <- table(df_links_pre)
rm(df_links_pre)
frequencies <- numeric(dim(df_links)[1])
for(i in 1:dim(df_links)[1]){
m_i <- df_links$Mittente[i]
d_i <- df_links$Destinatario[i]
freqeuncies[i] <- freq_links[which(rownames(freq_links)==m_i),which(colnames(freq_links)==s_i)]
}
df_links$weight <- frequencies
rm(frequencies)
# net
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
# rimozione NA's
df_links_pre <- na.omit(df_links_pre) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
df_links <- unique(df_links_pre) # interazioni di interesse
freq_links <- table(df_links_pre)
rm(df_links_pre)
frequencies <- numeric(dim(df_links)[1])
for(i in 1:dim(df_links)[1]){
m_i <- df_links$Mittente[i]
d_i <- df_links$Destinatario[i]
freqeuncies[i] <- freq_links[which(rownames(freq_links)==m_i),which(colnames(freq_links)==d_i)]
}
df_links$weight <- frequencies
rm(frequencies)
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
# rimozione NA's
df_links_pre <- na.omit(df_links_pre) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
df_links <- unique(df_links_pre) # interazioni di interesse
freq_links <- table(df_links_pre)
rm(df_links_pre)
frequencies <- numeric(dim(df_links)[1])
for(i in 1:dim(df_links)[1]){
m_i <- df_links$Mittente[i]
d_i <- df_links$Destinatario[i]
frequencies[i] <- freq_links[which(rownames(freq_links)==m_i),which(colnames(freq_links)==d_i)]
}
df_links$weight <- frequencies
rm(frequencies)
df_nodes <- data.frame(IDs = sort(unique(c(df_links$Mittente,df_links$Destinatario)))) # persone che interagiscono : 119
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
plot(net)
E(net)$weight
E(net)$weight# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode="total")
V(net)$size <- deg/15
# The labels are currently node IDs.
# Setting them to NA will render no labels:
V(net)$label <- NA
# Set edge width based on weight:
E(net)$width <- E(net)$weight/6
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
deg
119
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
# Set edge width based on weight:
E(net)$width <- E(net)$weight/6
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
# We can even set the network layout:
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
l <- layout_with_fr(net)
plot(net, layout=l)
#(2) città Roma/T
V(net)
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
# rimozione NA's
df_links_pre <- na.omit(df_links_pre) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
freq_links <- table(df_links_pre)
apply(freq_links,1,sum)
sort(apply(freq_links,1,sum))
(apply(freq_links,1,sum)([sort(rownames(freq_links))])
apply(freq_links,1,sum)[sort(rownames(freq_links))]
sort(rownames(freq_links))
sort(colnames(freq_links))
# net
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
# rimozione NA's
df_links_pre <- na.omit(df_links_pre) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
df_links <- unique(df_links_pre) # interazioni di interesse
freq_links <- table(df_links_pre)
frequencies <- numeric(dim(df_links)[1])
for(i in 1:dim(df_links)[1]){
m_i <- df_links$Mittente[i]
d_i <- df_links$Destinatario[i]
frequencies[i] <- freq_links[which(rownames(freq_links)==m_i),which(colnames(freq_links)==d_i)]
}
df_links$weight <- frequencies
name_ppl <- sort(unique(c(df_links$Mittente,df_links$Destinatario)))
out_degree <- sapply(1:length(name_ppl),function(x) {name_loc <- name_ppl[x]
which_loc <- which(df_links_pre$Mittente == name_loc)
if(length(which_loc)>=1)
{return(length(which_loc))}
else{
return(0)
}})
in_degree <- sapply(1:length(name_ppl),function(x) {name_loc <- name_ppl[x]
which_loc <- which(df_links_pre$Destinatario == name_loc)
if(length(which_loc)>=1)
{return(length(which_loc))}
else{
return(0)
}})
df_nodes <- data.frame(name = name_ppl,
in_degree = in_degree ,
out_degree = out_degree) # persone che interagiscono : 119
rm(frequencies,df_links_pre,freq_links)
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Compute node degrees (#links) and use that to set node size:
V(net)$size <- df_nodes$in_degree + df_nodes$out_degree
plot(net)
# Compute node degrees (#links) and use that to set node size:
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/10
plot(net)
V(net)
df_nodes[1:10,]
E(net)$weight
# Setting them to NA will render no labels:
V(net)$label <- NA
# Set edge width based on weight:
E(net)$width <- E(net)$weight
#change arrow size and edge color:E(net)$edge.color <- "gray80"
E(net)$edge.color <- "gray80"
plot(net)
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/5
# The labels are currently node IDs.
# Setting them to NA will render no labels:
V(net)$label <- NA
# Set edge width based on weight:
E(net)$width <- E(net)$weight
#change arrow size and edge color:
#E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
plot(net)
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
l <- layout_with_fr(net)
plot(net, layout=l)
l <- layout_in_circle(net)
plot(net, layout=l)
names(lettere)
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
# ri
rm(df_links_pre)
lettere$Anno
table(lettere$Anno)
barplot(table(lettere$Anno)
)
plot(table(lettere$Anno)
)
plot(as.vector(table(lettere$Anno)
)
)
plot(as.vector(table(lettere$Anno),type="b")
)
plot(as.vector(table(lettere$Anno)0,type="b")
plot(as.vector(table(lettere$Anno)),type="b")
seq(1650,1800,by=10)
cut(lettere$Anno,breaks = seq(1650,1800,by=10),include.lowest = TRUE,right = FALSE)
lettere$Anno[616]
table(cut(lettere$Anno,breaks = seq(1650,1800,by=10),include.lowest = TRUE,right = FALSE))
barplot(table(cut(lettere$Anno,breaks = seq(1650,1800,by=10),include.lowest = TRUE,right = FALSE)))
library(raster)
?getData
greece <- getData('GADM', country='GRC', level=1)
plot(grece)
plot(greece)
rm(greece)
italy <- getData('GADM', country='ITA', level=1)
plot(italy)
rm(italy)
?getData
getData('SRTM', lon=5, lat=45)
install.packages("rgdal")
prova <- getData('SRTM', lon=5, lat=45)
plot(prova)
rm(list=ls())
# Data 06/03/2021
library(readxl) # per caricare file excel (.xlx)
library(igraph) # per creare oggetto rete
read_excel("lettere_database.xlsx")
# abbiamo bisogno del luogo del destinatario (dai dati?)
lettere <- read_excel("lettere_database.xlsx")
# correcting NA's
nas_to_correct <- c("N. N.","[n. d.]","[N. N.]")
lettere$Mittente[lettere$Mittente %in% nas_to_correct] <- NA
lettere$Destinatario[lettere$Destinatario %in% nas_to_correct] <- NA
rm(nas_to_correct)
# ren
its_a_long_name <- "Astesan, Jacques François Thomas; Balbis Bertone, Marco Aurelio; Caissotti di Chiusano, Maurizio Paolo; Morozzo da Magliano, Carlo Giuseppe; Orlié de St-Innocent, Jean-Baptiste; Pochettini, Giuseppe Ottavio"
lettere$Mittente[which(lettere$Mittente == its_a_long_name)] <- "Astesan, Balbis et al."
lettere$Destinatario[which(lettere$Destinatario == its_a_long_name)] <- "Astesan, Balbis et al."
rm(its_a_long_name)
# persone
persone <- sort(unique(c(lettere$Mittente,lettere$Destinatario)))
length(persone) # 141 persone
# net
df_links_pre <- data.frame(Mittente = lettere$Mittente, Destinatario = lettere$Destinatario)
# rimozione NA's
df_links_pre <- na.omit(df_links_pre) # 600 lettere (41 vengono scartate perché manca o il destinatario o il mittente)
df_links <- unique(df_links_pre) # interazioni di interesse
freq_links <- table(df_links_pre)
frequencies <- numeric(dim(df_links)[1])
for(i in 1:dim(df_links)[1]){
m_i <- df_links$Mittente[i]
d_i <- df_links$Destinatario[i]
frequencies[i] <- freq_links[which(rownames(freq_links)==m_i),which(colnames(freq_links)==d_i)]
}
df_links$weight <- frequencies
name_ppl <- sort(unique(c(df_links$Mittente,df_links$Destinatario)))
out_degree <- sapply(1:length(name_ppl),function(x) {name_loc <- name_ppl[x]
which_loc <- which(df_links_pre$Mittente == name_loc)
if(length(which_loc)>=1)
{return(length(which_loc))}
else{
return(0)
}})
in_degree <- sapply(1:length(name_ppl),function(x) {name_loc <- name_ppl[x]
which_loc <- which(df_links_pre$Destinatario == name_loc)
if(length(which_loc)>=1)
{return(length(which_loc))}
else{
return(0)
}})
df_nodes <- data.frame(name = name_ppl,
in_degree = in_degree ,
out_degree = out_degree) # persone che interagiscono : 119
rm(frequencies,df_links_pre,freq_links)
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
# first plot of the network
plot(net, edge.arrow.size=.4, edge.curved=.1)
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/5
plot(net)
V(net)$label
V(net)
V(net)$label <- N
V(net)$label <- NA
V(net)$label
plot(net)
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/2
#
plot(net)
hist(df_nodes$in_degree + df_nodes$out_degree)
# grandezza vertici proporzionale al livello di attività dei nodi
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/150
plot(net)
# grandezza vertici proporzionale al livello di attività dei nodi
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/75
plot(net)
# grandezza vertici proporzionale al livello di attività dei nodi
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/(150*0.25)
plot(net)
# grandezza vertici proporzionale al livello di attività dei nodi
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/(150*(1/8))
plot(net)
# grandezza vertici proporzionale al livello di attività dei nodi
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/(150*(1/16))
plot(net)
150/16
max((df_nodes$in_degree + df_nodes$out_degree))
max((df_nodes$in_degree + df_nodes$out_degree))/2
denom_scale <- max(df_nodes$in_degree + df_nodes$out_degree)/4
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/denom_scale
plot(net)
denom_scale <- max(df_nodes$in_degree + df_nodes$out_degree)/8
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/denom_scale
plot(net)
denom_scale <- max(df_nodes$in_degree + df_nodes$out_degree)/16
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/denom_scale
plot(net)
# Set edge width based on weight:
E(net)$width <- E(net)$weight
plot(net)
graph_attr(net, "layout") <- layout_with_lgl
plot(net)
l <- layout_with_fr(net)
plot(net, layout=l)
l <- layout_with_fr(net)
plot(net, layout=l)l <- layout_in_circle(net)
#l <- layout_with_fr(net)
plot(net, layout=l)
l <- layout_in_circle(net)
#l <- layout_with_fr(net)
plot(net, layout=l)
# Set edge width based on weight:
E(net)$width <- E(net)$weight/max(E(net)$weight)
l <- layout_in_circle(net)
#l <- layout_with_fr(net)
plot(net, layout=l)
max(E(net)$weight
)
E(net)$width <- E(net)$weight/(max(E(net)$weight)/4)
l <- layout_in_circle(net)
#l <- layout_with_fr(net)
plot(net, layout=l)
E(net)$width <- E(net)$weight/(max(E(net)$weight)/8)
l <- layout_in_circle(net)
#l <- layout_with_fr(net)
plot(net, layout=l)
View(l)
# oggetto di rete 'igraph'
net <- graph_from_data_frame(d=df_links, vertices=df_nodes, directed=T)
# grandezza vertici proporzionale al livello di attività dei nodi
denom_scale <- max(df_nodes$in_degree + df_nodes$out_degree)/16
V(net)$size <- (df_nodes$in_degree + df_nodes$out_degree)/denom_scale
E(net)$width <- E(net)$weight/(max(E(net)$weight)/8)
l <- layout_in_circle(net)
#l <- layout_with_fr(net)
plot(net, layout=l)
E(net)$widths
E(net)$width
E(net)$width*18
V(net)$label <- rep(NA,dim(df_nodes)[1])
V(net)$label <- df_nodes$names[(df_nodes$in_degree + df_nodes$out_degree)>=40]
V(net)$label <- rep(NA,dim(df_nodes)[1])
plot(net)
df_nodes$names[(df_nodes$in_degree + df_nodes$out_degree)>=40]
df_nodes$name[(df_nodes$in_degree + df_nodes$out_degree)>=40]
V(net)$label <- df_nodes$name[(df_nodes$in_degree + df_nodes$out_degree)>=40]
rep(NA,dim(df_nodes)[1])[(df_nodes$in_degree + df_nodes$out_degree)>=40]
rep(NA,dim(df_nodes)[1])
V(net)$label <- rep(NA,dim(df_nodes)[1])
V(net)$label[(df_nodes$in_degree + df_nodes$out_degree)>=40] <- df_nodes$names[(df_nodes$in_degree + df_nodes$out_degree)>=40]
rep(NA,dim(df_nodes)[1])
V(net)$label <- rep(NA,dim(df_nodes)[1])
V(net)$label
(df_nodes$in_degree + df_nodes$out_degree)>=40
df_nodes$names[(df_nodes$in_degree + df_nodes$out_degree)>=40]
(df_nodes$in_degree + df_nodes$out_degree)>=40
which((df_nodes$in_degree + df_nodes$out_degree)>=40)
df_nodes$names[which((df_nodes$in_degree + df_nodes$out_degree)>=40)]
df_nodes$names
df_nodes$name[which((df_nodes$in_degree + df_nodes$out_degree)>=40)]
V(net)$label <- rep(NA,dim(df_nodes)[1])
V(net)$label[(df_nodes$in_degree + df_nodes$out_degree)>=40] <- df_nodes$name[which((df_nodes$in_degree + df_nodes$out_degree)>=40)]
plot(net)
V(net)$label
na.omit(V(net)$label)
?`cut
``
`
?cut
cut(lettere$Anno,breaks=seq(1650,1800,by=10),include.lowest=TRUE,right=TRUE)
seq(1650,1800,by=10)
table(cut(lettere$Anno,breaks=seq(1650,1800,by=10),include.lowest=TRUE,right=FALSE))
plot(table(cut(lettere$Anno,breaks=seq(1650,1800,by=10),include.lowest=TRUE,right=FALSE)))
barplot(table(cut(lettere$Anno,breaks=seq(1650,1800,by=10),include.lowest=TRUE,right=FALSE)))
